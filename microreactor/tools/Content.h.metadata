#pragma once
#ifndef $namespace_$contentname
#define $namespace_$contentname

#include <nlohmann/json.hpp>
#include <microreactor/Microreactor.h>
@repeatstart
#include "$propertyclass.h"
@repeatend


namespace $namespace
{
    class $contentname
    {
    public:
        $contentname();
        virtual ~$contentname();

    public:
        @repeatstart
        virtual const $propertytype& Get$propertyname() const { return m$propertyname; }
        virtual $propertytype& Ref$propertyname() { return m$propertyname; }
        @repeatend

        virtual bool Write(std::string& buffer) const;

    protected:
        @repeatstart
        $propertytype m$propertyname {$propertydefault};
        @repeatend
    };

    void to_json(nlohmann::json& j, const $contentname& c);
    void from_json(const nlohmann::json& j, $contentname& c);
}


#endif // $namespace_$contentname
