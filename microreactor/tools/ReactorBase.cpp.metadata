#include "$method$pathnameReactorBase.h"


namespace $namespace
{
    $method$pathnameReactorBase::$method$pathnameReactorBase(sg::microreactor::Connection& connection, std::shared_ptr<sg::microreactor::RestRequest> request)
        : RestReactor(connection, request)
    {
        nlohmann::json j(std::string(request->mBody.mOffset, request->mBody.mLength));
        j.get_to(mRequestContent);
    }

    $method$pathnameReactorBase::~$method$pathnameReactorBase()
    {
    }

    bool $method$pathnameReactorBase::Process()
    {
        if (InputMessage() == nullptr)
        {
            LOG("Invalid request [ReqId=%s]\n", InputMessage()->TrackId.cref().c_str());
            return sg::microreactor::RestResponse::SendErrorWith(mConnection, 400, "Invalid request");
        }

        sg::microreactor::RestResponse response;
        response.mHeaders.emplace_back(sg::microreactor::HttpHeader("Content-Type", "application/json"));

        auto buffer = std::make_shared<std::string>();
        if (mRequestContent.Write(*buffer))
        {
            SetHttpBody(buffer, response);
        }

        return response.Send(mConnection);
    }
}
